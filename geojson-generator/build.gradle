plugins {
    id "java"
    id "com.google.cloud.tools.jib" version "3.4.0"
    id 'com.github.johnrengelman.shadow' version '8.1.0'
}

repositories {
    maven { url "https://repo.osgeo.org/repository/release/" }
    mavenCentral()
}

dependencies {
    // CityGML4J
    implementation 'org.citygml4j:citygml4j-xml:3.0.0'
    implementation 'org.citygml4j:citygml4j-cityjson:3.0.0'

    // GeoTools
    implementation "org.geotools:gt-geotiff:26.5"
    implementation 'org.geotools:gt-shapefile:26.5'
    implementation 'org.geotools:gt-geojson:26.5'
    implementation 'org.geotools:gt-geojsondatastore:26.5'
    implementation "org.geotools:gt-coverage:26.5"
    implementation "org.geotools:gt-main:26.5"

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

jar {
    dependsOn 'test'
    finalizedBy shadowJar
    manifest {
        attributes "Main-Class": "com.gaia3d.Main"
        attributes "Implementation-Version": project.version
        attributes 'Implementation-Title': '3d-tiler'
        attributes 'Implementation-Vendor': 'Gaia3d, Inc.'
        attributes 'Implementation-Vendor-Id': 'com.gaia3d'
        attributes 'Implementation-URL': 'http://java.sun.com/products/java-media/jai/forDevelopers/jai-imageio/'
    }
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveFileName = "ogc-pilot-tools-${project.version}-plain.jar"
    destinationDirectory.set(file("${projectDir}/dist"))
}

shadowJar {
    mergeServiceFiles()
    manifest {
        attributes "Main-Class": "com.gaia3d.Main"
        attributes "Implementation-Version": project.version
        attributes 'Implementation-Title': '3d-tiler'
        attributes 'Implementation-Vendor': 'Gaia3d, Inc.'
        attributes 'Implementation-Vendor-Id': 'com.gaia3d'
        attributes 'Implementation-URL': 'http://java.sun.com/products/java-media/jai/forDevelopers/jai-imageio/'
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from sourceSets.main.runtimeClasspath
    configurations = [project.configurations.runtimeClasspath]
    archiveFileName = "ogc-pilot-tools-${project.version}.jar"
    destinationDirectory.set(file("${projectDir}/dist"))
}

test {
    useJUnitPlatform()
}